// src/BasicChatBot/context.tsx
import {
  createContext,
  useState
} from "react";
import OpenAI from "openai";
import { jsx } from "react/jsx-runtime";
var BasicChatBot = createContext({});
function BasicChatBotProvider({
  children
}) {
  const [message, setMessage] = useState("");
  const [chats, setChats] = useState([]);
  const [isTyping, setIsTyping] = useState(false);
  const [openAiApiKey, setOpenAiApiKey] = useState("");
  const [chatTitle, setChatTitle] = useState("");
  const [systemPrompt, setSystemPrompt] = useState("");
  const basicChat = async () => {
    if (!message)
      return;
    const openai = new OpenAI({
      apiKey: openAiApiKey,
      dangerouslyAllowBrowser: true
    });
    setIsTyping(true);
    scrollTo(0, 1e10);
    const msgs = chats;
    msgs.push({ role: "user", content: message });
    setChats(msgs);
    setMessage("");
    await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: systemPrompt ? systemPrompt : ""
        },
        ...chats
      ]
    }).then((res) => {
      msgs.push(res.choices[0].message);
      setChats(msgs);
      setIsTyping(false);
      scrollTo(0, 1e10);
    }).catch((error) => {
      console.log(error);
    });
  };
  return /* @__PURE__ */ jsx(
    BasicChatBot.Provider,
    {
      value: {
        message,
        setMessage,
        chats,
        setChats,
        isTyping,
        setIsTyping,
        basicChat,
        openAiApiKey,
        setOpenAiApiKey,
        chatTitle,
        setChatTitle,
        systemPrompt,
        setSystemPrompt
      },
      children
    }
  );
}

// src/BasicChatBot/Layer.tsx
import { useContext as useContext5, useEffect as useEffect2 } from "react";

// src/BasicChatBot/Body.tsx
import { useContext, useEffect, useRef } from "react";
import Markdown from "react-markdown";
import { Box } from "@mui/material";
import { jsx as jsx2, jsxs } from "react/jsx-runtime";
function Body() {
  const { isTyping, chats } = useContext(BasicChatBot);
  const ref = useRef(null);
  useEffect(() => {
    ref.current?.scrollIntoView({
      behavior: "smooth",
      block: "end"
    });
  }, [chats]);
  const userStyle = {
    backgroundColor: "#61677A",
    ml: "25%",
    display: "flex",
    flexDirection: "row-reverse"
  };
  const assistantStyle = {
    backgroundColor: "#000000",
    width: "75%"
  };
  const generalStyle = {
    color: "white",
    padding: 1,
    mb: 2,
    borderRadius: 2
  };
  return /* @__PURE__ */ jsxs(
    Box,
    {
      component: "main",
      sx: {
        maxWidth: "100vw",
        pb: 10,
        height: "auto",
        backgroundColor: "#EBECF1"
      },
      children: [
        /* @__PURE__ */ jsx2("section", { style: { padding: 10 }, children: chats && chats.length ? chats.map((chat, index) => /* @__PURE__ */ jsx2(
          Box,
          {
            component: "p",
            sx: chat.role === "user" ? { ...userStyle, ...generalStyle } : chat.role === "assistant" ? { ...assistantStyle, ...generalStyle } : {},
            children: /* @__PURE__ */ jsx2("span", { children: /* @__PURE__ */ jsx2(Markdown, { children: chat.content }) })
          },
          index
        )) : "" }),
        /* @__PURE__ */ jsx2(
          Box,
          {
            component: "section",
            sx: {
              ...assistantStyle,
              ...generalStyle,
              visibility: isTyping ? "visible" : "hidden",
              ml: 1
            },
            children: /* @__PURE__ */ jsx2("p", { children: /* @__PURE__ */ jsx2("i", { children: isTyping ? "Typing" : "" }) })
          }
        ),
        /* @__PURE__ */ jsx2("div", { ref })
      ]
    }
  );
}

// src/BasicChatBot/Form.tsx
import { useContext as useContext3 } from "react";

// src/BasicChatBot/components/input.tsx
import { Box as Box2, InputAdornment, TextField } from "@mui/material";
import { useContext as useContext2 } from "react";
import { jsx as jsx3 } from "react/jsx-runtime";
function Input(props) {
  const { isTyping } = useContext2(BasicChatBot);
  const {
    placeholder,
    setter,
    value,
    type,
    register,
    name,
    error,
    helperText,
    startAdornment,
    endAdornment,
    disabled
  } = props;
  return /* @__PURE__ */ jsx3(Box2, { children: /* @__PURE__ */ jsx3(
    TextField,
    {
      autoFocus: true,
      disabled: disabled || isTyping,
      id: name,
      fullWidth: true,
      name,
      error,
      ...register ? { ...register(name) } : "",
      helperText,
      color: "primary",
      value,
      type,
      placeholder,
      onChange: (e) => setter(e.target.value),
      InputProps: {
        startAdornment: /* @__PURE__ */ jsx3(InputAdornment, { position: "start", sx: { cursor: "pointer" }, children: startAdornment }),
        endAdornment: /* @__PURE__ */ jsx3(InputAdornment, { position: "end", sx: { cursor: "pointer" }, children: endAdornment })
      }
    }
  ) });
}

// src/BasicChatBot/Form.tsx
import { Box as Box3 } from "@mui/material";

// src/BasicChatBot/components/SendBtn.tsx
import { Send } from "@mui/icons-material";

// src/BasicChatBot/components/btn.tsx
import { Button } from "@mui/material";
import { jsxs as jsxs2 } from "react/jsx-runtime";
function Btn(props) {
  const { variant, href, label, sx, icon, handleClick, iconL, autoFocus } = props;
  return /* @__PURE__ */ jsxs2(
    Button,
    {
      variant,
      href,
      sx: { ...sx, textTransform: "capitalize" },
      onClick: () => handleClick(),
      autoFocus,
      children: [
        iconL,
        label,
        icon
      ]
    }
  );
}

// src/BasicChatBot/components/SendBtn.tsx
import { jsx as jsx4 } from "react/jsx-runtime";
function SendBtn(props) {
  const { handleSubmit } = props;
  return /* @__PURE__ */ jsx4(Btn, { icon: /* @__PURE__ */ jsx4(Send, { sx: {} }), handleClick: () => handleSubmit() });
}

// src/BasicChatBot/Form.tsx
import { jsx as jsx5 } from "react/jsx-runtime";
function Form() {
  const { basicChat, setMessage, message } = useContext3(BasicChatBot);
  const chat = async (e) => {
    e ? e.preventDefault() : "";
    basicChat();
  };
  return /* @__PURE__ */ jsx5(
    Box3,
    {
      component: "form",
      action: "",
      onSubmit: (e) => chat(e),
      sx: {
        position: "fixed",
        bottom: 0,
        width: "100%",
        backgroundColor: "white"
      },
      children: /* @__PURE__ */ jsx5(
        Input,
        {
          type: "text",
          name: "message",
          value: message,
          placeholder: "Enter message here...",
          setter: setMessage,
          endAdornment: /* @__PURE__ */ jsx5(SendBtn, { handleSubmit: chat })
        }
      )
    }
  );
}

// src/BasicChatBot/heading.tsx
import { Box as Box4 } from "@mui/material";
import { useContext as useContext4 } from "react";
import { jsx as jsx6 } from "react/jsx-runtime";
function Heading() {
  const { chatTitle } = useContext4(BasicChatBot);
  return /* @__PURE__ */ jsx6(
    Box4,
    {
      component: "section",
      sx: {
        margin: 0,
        backgroundColor: "black",
        color: "white",
        padding: 2,
        position: "sticky",
        top: 0,
        borderBottom: "1px solid white"
      },
      children: /* @__PURE__ */ jsx6(Box4, { component: "h1", children: chatTitle })
    }
  );
}

// src/BasicChatBot/Layer.tsx
import { Paper } from "@mui/material";
import { jsx as jsx7, jsxs as jsxs3 } from "react/jsx-runtime";
function Layer(props) {
  const { openAiApiKey, chatTitle, systemPrompt } = props;
  const { chats, setOpenAiApiKey, setChatTitle, setSystemPrompt } = useContext5(BasicChatBot);
  useEffect2(() => {
    setOpenAiApiKey(openAiApiKey);
    setChatTitle(chatTitle);
    setSystemPrompt(systemPrompt);
  }, []);
  return /* @__PURE__ */ jsxs3(
    Paper,
    {
      component: "div",
      sx: {
        position: chats && chats.length ? "absolute" : "relative",
        backgroundColor: "#EBECF1",
        height: "100vh",
        width: "100vw"
      },
      square: true,
      elevation: 0,
      children: [
        /* @__PURE__ */ jsx7(Heading, {}),
        /* @__PURE__ */ jsx7(Body, {}),
        /* @__PURE__ */ jsx7(Form, {})
      ]
    }
  );
}

// src/BasicChatBot/index.tsx
import { jsx as jsx8 } from "react/jsx-runtime";
function BasicChat(props) {
  const { openAiApiKey, chatTitle, systemPrompt } = props;
  return /* @__PURE__ */ jsx8(BasicChatBotProvider, { children: /* @__PURE__ */ jsx8(
    Layer,
    {
      openAiApiKey,
      chatTitle,
      systemPrompt
    }
  ) });
}
var BasicChatBot_default = BasicChat;
export {
  BasicChatBot_default as BasicChat
};
